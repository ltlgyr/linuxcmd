[ config ]
git config --global user.name   <name>
git config --global user.email  <email>


[ status ]
   	0, create  创建
	1, Untracked  未跟踪
	2, tracked 跟踪
	3, unstage 未暂存
	4, stage  暂存
	5, uncommit 未提交
	6, coummit 提交

[ work ]
	init: 
		git init --bare 
	clone: 
		git clone --depth=1    repo_url.git
	status: 
		git status 
	diff: 
		git diff --cached 
	show:
		git show 
	clean:
		git clean -xdf
			x  -----删除忽略文件已经对git来说不识别的文件
			d  -----删除未被添加到git的路径中的文件
			f  -----强制运行
	stash: 将所有未提交的修改
		git stash  list
		git stash  show 
		git stash  drop
		git stash  pop
		git stash  branch 
		git stash  clear
		git stash  create 
		git stash  store

[ stage ]
	add: 

	commit -m 

	apply:
		先检查patch文件：
		git apply --stat newpatch.patch
		检查能否应用成功：
		git apply --check newpatch.patch

	am:
		git am --abort
		打补丁：
		git am --signoff < newpatch.patch

	formate-patch 
		git 当前分支所有超前master的提交：
		git format-patch -M master
		某次提交以后的所有patch:
		git format-patch 4e16 --4e16指的是commit名
		从根到指定提交的所有patch:
		git format-patch --root 4e16
		某两次提交之间的所有patch:
		git format-patch 365a..4e16 --365a和4e16分别对应两次提交的名称
		某次提交（含）之前的几次提交：
		git format-patch –n 07fe --n指patch数，07fe对应提交的名称
		故，单次提交即为：
		git format-patch -1 07fe
		git format-patch -n 

	reset:   [index, head, working directory]
		git reset --sorf (回退commit，内容在stage中)
		git reset --mix ( 默认使用) （回退commit， 内容在工作区）
		git reset --hard  ID （回退commit，内容也回退）

	stage: Stash the changes in a dirty working directory away
	    git stage  

	revert: Revert some existing commits
		git revert

[ remote ]
	push
		git push origin --delete  currentbranch
		git push origin HEAD -f
	pull:  Fetch from and integrate with another repository or a local branch

	fetch : Download objects and refs from another repository



[ branch ]
	checkout:
		git
		创建一个没有父节点的branch
		git checkout --orphan <branch name>

	branch:
		git branch  -D
		git branch  -a

	merge:
		git merge --squash master 

	rebase: 
		[statu]
			pick  :保留该commit（缩写:p）
			reword:保留该commit，但我需要修改该commit的注释（缩写:r）
			edit  :保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e）
			squash:将该commit和前一个commit合并（缩写:s）
			fixup :将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f）
			exec  :执行shell命令（缩写:x）
			drop  :我要丢弃该commit（缩写:d）

		git rebase -i [startpoint] [endpoint]
			如果合并中间的几个commit,会产生一个临时的分支,基于这个临时分支，创建一个新的分支 feature/temp
			再切回 master分支, 执行:git rebase feature/temp

		git rebase --abort 来撤销修改

	tag
		git tag -a v0.1 -m "version 0.1 released" 3628164

[ log ]
	log
		git log --oneline 
		git log --stat  
		git log -p    & git show 
		git log --pretty="%cn committed %h on %cd"
		git log --author="name"
		git log -n
		git log --after "12-30-2019"
		git log --before  "1-1-2020"
		git log --until=1.minute.ago      before 1.
		git log --since=1.day.ago
		git log --since=1.hour.ago
		git log --merges 
		git log --no-merges 
		git log --decoreate
		git log branch -- filename 
		git log --grep="text in commit"
		git log --all-match --grep="text in commit" --author="text in author"
		git log --graph --oneline --all 
		git log --graph --pretty=oneline --abbrev-commit

	shortlog 
	
	whatchanged

	reflog
		git reflog 
[ submodule ]
	第一步：添加子模块。
	git submodule add https://github.com/ltlgyr/linuxcmd.git
在.gitmodules文件中：
	[submodule "linuxcmd"]
    path = linuxcmd
    url = https://github.com/ltlgyr/linuxcmd.git
	第二步：查看子模块的状态。
		git diff --cached linuxcmd
		git diff --cached --submodule
	第三步：提交修改。
		git commit -am "add the module"	
		git push origin master
	第三步：克隆含有子模块的项目
		git clone gitpath 
		git submodule init
		git submodule update
	  更简单的方法；
		git clone --recurse-submodules gitpath
	第四步：查看不同
		git diff --submodule
		git submodule update --remote 
		git log -p --submodule
	第五步：同步
		git submodule sync --recursive 
		git submodule update --remote --merge
		

[ using 1]
	将其他commit添加到一个分支上的方法	
	方法一：
		git rebase [startpoint] [endpoint] --onto  [branch]
		git checkout [branch]
		git reset --hard [commit id]
	方法二：
		git cherry-pick  [startpoint] [endpoint]

[ using 2]	
	修改某一个commit
		1.git rebase -i 这个commit的前一个 
		2.将pick修改成 edit
		3.修改内容
		4.git commit --amend -m ""
		5.git rebase --continue



[ using 3]		
	基于master 创建两个分支a,b开发, a先开发完提交，b后开发完。
	1. git checkout master 
	2. git pull
	3. git checkout b
	4. git rebase master
	     解决冲突，
	5. git rebase continue...
	6. git checkout master 
	7. git merge b

	
	
		git remote update


